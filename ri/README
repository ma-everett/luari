R E A D M E
-----------

G & RT RI :

Geometry & Rendering Tools 
RenderMan Interface Lua Binding Module.

Current Version 0.1

This Lua module provides a RIB (RenderMan Bytestream) 
outputter following Pixar's RenderMan Interface(tm) Spec
version 3.2.

EXAMPLES

For examples see bin/ritest.lua, additionally see src/interface.lua
for the full supported spec plus some additional functions.

KNOWN LIMITATIONS

version 0.1 only has a to *.rib file outputter, this will be 
addressed in the next version to allow piping. 

There currently is no attribute checking on the input, at this
point the module relies on checking user input further down
the pipeline, ie. when rendering. This again will be addressed
before version 1.

There is limited testing. Later versions will include an automated
testing suite of lua scripts which as well as provide testing will
also prove to be useful for documentation and examples.

At present there is no easy method of adding custom functions to the
interface. 

No build for other platforms besides UNIX-like.

A requirement for the RenderMan Interface c-header file NOT included
in this release. This must be provided by a compliant renderer. This
will be addressed for the next release. 

SUPPORTED ENVIRONMENTS

As of this release only UNIX-like operating systems are supported
out of the box via the scons build system. 

A Windows build should be possible with the current codebase, abiet 
with some modifications for building dynamic object libraries and
a build system for this platform is required. However this should
not be a difficult job to undertake. 

Later versions will have a build system in place for Windows OS. 
Also a Makefile based system is penned for the next release.

If anybody produces a new build system for this code for any
platform then please let us know so that we can offically 
support that platform.

BUILDING

To build this module you will need to have installed a RI 
compliant renderer or the RI header file (ri.h). For a Free
renderer I would suggest 'Pixie'.

You will also require Lua 5.1+ and the scons build environment.
The build is simple enough for you to build from a more traditional
makefile. A makefile will be provided for in a later version. 

In summary: 

+ ri.h (3.2 +) - grab a RI Compliant renderer if not already installed
+ Lua (5.1 +)
+ scons (any version)

The module provides a build shell script, which calls /src/build.lua to
construct interface code automagically. Then it compiles using a scons
call, then if successful will move and rename the shared library binary 
to be used as a module in Lua, which will be located in the bin directory.

NOTE! If you manually compile, ie. don't use the build shell script, 
ensure that src/lri.h and src/lri.c have been generated by doing to following
in the src directory:

foo#> ./build.lua interface.lua

This will generate the required code. 

ADDING INTERFACE COMMANDS

If you need to add a new Lua function to the interface you need to add an 
entry in src/interface.lua (see for examples) and then re-generate the 
interface code (see above for details).

TESTING

There is a short test script called ritest.lua in the bin directory which
will generate a rib file ready for rendering. If you have Pixie installed
you can call the test through the test shell script. Which calls ritest.lua
and then renders the result for you. If successful, test.tif will be 
generated.   

INSTALLING

This should be as simple as copying bin/grt_ri.so into the module path for
Lua. Place in the Lua install directory for localling to your scripts.
See Lua Module Documentation if unsure. 

PROBLEMS

Then please feel free to tell us about them at http://www.luaforge.net/projects/grt.